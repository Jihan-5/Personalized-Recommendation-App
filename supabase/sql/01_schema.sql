-- Enable pgvector extension
create extension if not exists vector with schema public;

-- App-specific modes
create type public.app_mode as enum ('NFT', 'Shopping', 'Media');

-- Items Table
-- Stores all discoverable items across all modes.
create table public.items (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone default now() not null,
    title text not null,
    description text,
    image_url text,
    price numeric(10, 2) not null default 0.00,
    mode public.app_mode not null,
    tags text[],
    -- The vector embedding for semantic search and recommendations
    embedding public.vector(1536) -- OpenAI 'text-embedding-3-small' has 1536 dimensions
);
comment on table public.items is 'Discoverable items for all modes.';

-- User Interactions Table
-- Records user events for personalization.
create table public.user_events (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    user_id uuid references auth.users(id),
    session_id text,
    event_type text not null, -- e.g., 'view', 'click', 'save', 'search'
    item_id bigint references public.items(id),
    metadata jsonb
);
comment on table public.user_events is 'User interactions for personalization.';

-- Follows Table
-- Stores user follows for collections or creators.
create table public.follows (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    user_id uuid references auth.users(id) not null,
    followed_item_id bigint references public.items(id) not null,
    -- You might follow a collection, so a text ID could be useful too
    -- followed_collection_id text, 
    unique(user_id, followed_item_id)
);
comment on table public.follows is 'User follows for items or collections.';

-- A/B Experiments Table
-- Tracks performance of different recommendation variants.
create table public.ab_experiments (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    name text not null, -- e.g., 'recommendation_algorithm'
    variant text not null, -- e.g., 'control', 'test_v1'
    exposures bigint not null default 0,
    clicks bigint not null default 0,
    unique(name, variant)
);
comment on table public.ab_experiments is 'Data for A/B testing variants.';


-- Fraud/Safety Flags
-- Basic table for logging suspicious activity.
create table public.fraud_signals (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default now() not null,
    user_id uuid references auth.users(id),
    session_id text,
    reason text not null, -- e.g., 'high_click_velocity', 'bot_behavior'
    metadata jsonb
);
comment on table public.fraud_signals is 'Flags for suspicious user activity.';

-- Trigger to update `updated_at` timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger on_items_update
  before update on public.items
  for each row execute procedure public.handle_updated_at();